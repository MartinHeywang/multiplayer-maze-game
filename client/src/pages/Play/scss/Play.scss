$cell-size: 5em;
$board-grid-gap: 1px;
$board-frame-border-width: 4px;
$wall-width: 2px;

.Play {
    display: grid;
    place-items: center;
    min-height: 100vh;

    // these are used in inline styles set through JavaScript
    --cell-size: #{$cell-size};
    --board-grid-gap: #{$board-grid-gap};

    .player {
        position: absolute;
        top: calc(1em - 1px);
        left: calc(1em - 1px);
        width: 3em;
        height: 3em;

        background-color: rgba(0, 0, 255, .3);

        transition: transform 100ms ease-in-out;
    }

    .our-player {
        background-color: yellow;
        z-index: 2;
    }
}

.board-frame {
    width: calc(5 * $cell-size + $board-frame-border-width * 2 + 4 * $board-grid-gap);
    height: calc(5 * $cell-size + $board-frame-border-width * 2 + 4 * $board-grid-gap);
    overflow: hidden;

    border: 4px solid white;
    background-color: #333;
    box-shadow: 1em 1em 0 0 rgba(0, 0, 0, 0.8);
}

.board {
    display: grid;
    gap: $board-grid-gap;

    position: relative;

    grid-template-columns: repeat(var(--cells-w), $cell-size);
    grid-template-rows: repeat(var(--cells-h), $cell-size);

    transform: translate(
        // twice the same translation for both axis, only detailing one
        calc(
                ($cell-size + $board-grid-gap) // unit width
                * clamp(0, var(--player-x) - 2, var(--cells-w) - 5)
                    // times (player-x - 2) in a min-max
                * -1
            ),
        calc(($cell-size + $board-grid-gap) * clamp(0, var(--player-y) - 2, var(--cells-h) - 5) * -1)
    ); // through JavaScript
    transition: transform 100ms ease-in-out;
}
